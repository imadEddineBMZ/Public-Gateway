/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createContributorDTOFromDiscriminatorValue, createProblemDetailsFromDiscriminatorValue, createUpdateContributorResponseFromDiscriminatorValue, serializeUpdateContributorRequest, serializeUpdateContributorResponse, type ContributorDTO, type ProblemDetails, type UpdateContributorRequest, type UpdateContributorResponse } from '../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /Contributors/{contributorId}
 */
export interface WithContributorItemRequestBuilder extends BaseRequestBuilder<WithContributorItemRequestBuilder> {
    /**
     * Delete a Contributor by providing a valid integer id.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ProblemDetails} error when the service returns a 400 status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Takes a positive integer ID and returns a matching Contributor record.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ContributorDTO>}
     * @throws {ProblemDetails} error when the service returns a 400 status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ContributorDTO | undefined>;
    /**
     * Update an existing Contributor by providing a fully defined replacement set of values.See: https://stackoverflow.com/questions/60761955/rest-update-best-practice-put-collection-id-without-id-in-body-vs-put-collecti
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<UpdateContributorResponse>}
     * @throws {ProblemDetails} error when the service returns a 400 status code
     */
     put(body: UpdateContributorRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<UpdateContributorResponse | undefined>;
    /**
     * Delete a Contributor by providing a valid integer id.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Takes a positive integer ID and returns a matching Contributor record.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Update an existing Contributor by providing a fully defined replacement set of values.See: https://stackoverflow.com/questions/60761955/rest-update-best-practice-put-collection-id-without-id-in-body-vs-put-collecti
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: UpdateContributorRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithContributorItemRequestBuilderUriTemplate = "{+baseurl}/Contributors/{contributorId}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithContributorItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithContributorItemRequestBuilderUriTemplate,
        errorMappings: {
            400: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithContributorItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createContributorDTOFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithContributorItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createUpdateContributorResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUpdateContributorRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
