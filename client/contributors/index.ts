/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createContributorListResponseFromDiscriminatorValue, createCreateContributorResponseFromDiscriminatorValue, createProblemDetailsFromDiscriminatorValue, serializeCreateContributorRequest, serializeCreateContributorResponse, type ContributorListResponse, type CreateContributorRequest, type CreateContributorResponse, type ProblemDetails } from '../models/index.js';
// @ts-ignore
import { type WithContributorItemRequestBuilder, WithContributorItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /Contributors
 */
export interface ContributorsRequestBuilder extends BaseRequestBuilder<ContributorsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.Contributors.item collection
     * @param contributorId Unique identifier of the item
     * @returns {WithContributorItemRequestBuilder}
     */
     byContributorId(contributorId: number) : WithContributorItemRequestBuilder;
    /**
     * List all contributors - returns a ContributorListResponse containing the Contributors.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ContributorListResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ContributorListResponse | undefined>;
    /**
     * Creates a new Contributor given a name.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CreateContributorResponse>}
     * @throws {ProblemDetails} error when the service returns a 400 status code
     */
     post(body: CreateContributorRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CreateContributorResponse | undefined>;
    /**
     * List all contributors - returns a ContributorListResponse containing the Contributors.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Creates a new Contributor given a name.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateContributorRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const ContributorsRequestBuilderUriTemplate = "{+baseurl}/Contributors";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ContributorsRequestBuilderNavigationMetadata: Record<Exclude<keyof ContributorsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byContributorId: {
        requestsMetadata: WithContributorItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["contributorId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ContributorsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ContributorsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createContributorListResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: ContributorsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCreateContributorResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateContributorRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
