/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { AuthRequestBuilderNavigationMetadata, type AuthRequestBuilder } from './auth/index.js';
// @ts-ignore
import { BloodDonationRequestsRequestBuilderRequestsMetadata, type BloodDonationRequestsRequestBuilder } from './bloodDonationRequests/index.js';
// @ts-ignore
import { BTCRequestBuilderNavigationMetadata, BTCRequestBuilderRequestsMetadata, type BTCRequestBuilder } from './bTC/index.js';
// @ts-ignore
import { CommunesRequestBuilderNavigationMetadata, type CommunesRequestBuilder } from './communes/index.js';
// @ts-ignore
import { ContributorsRequestBuilderNavigationMetadata, ContributorsRequestBuilderRequestsMetadata, type ContributorsRequestBuilder } from './contributors/index.js';
// @ts-ignore
import { DashboardRequestBuilderNavigationMetadata, type DashboardRequestBuilder } from './dashboard/index.js';
// @ts-ignore
import { DonorRequestBuilderNavigationMetadata, type DonorRequestBuilder } from './donor/index.js';
// @ts-ignore
import { EnumsRequestBuilderNavigationMetadata, type EnumsRequestBuilder } from './enums/index.js';
// @ts-ignore
import { PledgesRequestBuilderNavigationMetadata, PledgesRequestBuilderRequestsMetadata, type PledgesRequestBuilder } from './pledges/index.js';
// @ts-ignore
import { SubscriptionsRequestBuilderNavigationMetadata, SubscriptionsRequestBuilderRequestsMetadata, type SubscriptionsRequestBuilder } from './subscriptions/index.js';
// @ts-ignore
import { type UserRequestBuilder, UserRequestBuilderRequestsMetadata } from './user/index.js';
// @ts-ignore
import { type UsersRequestBuilder, UsersRequestBuilderRequestsMetadata } from './users/index.js';
// @ts-ignore
import { type WilayasRequestBuilder, WilayasRequestBuilderRequestsMetadata } from './wilayas/index.js';
// @ts-ignore
import { apiClientProxifier, ParseNodeFactoryRegistry, SerializationWriterFactoryRegistry, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type RequestAdapter } from '@microsoft/kiota-abstractions';
// @ts-ignore
import { FormParseNodeFactory, FormSerializationWriterFactory } from '@microsoft/kiota-serialization-form';
// @ts-ignore
import { JsonParseNodeFactory, JsonSerializationWriterFactory } from '@microsoft/kiota-serialization-json';
// @ts-ignore
import { MultipartSerializationWriterFactory } from '@microsoft/kiota-serialization-multipart';
// @ts-ignore
import { TextParseNodeFactory, TextSerializationWriterFactory } from '@microsoft/kiota-serialization-text';

/**
 * Instantiates a new {@link PostsClient} and sets the default values.
 * @param requestAdapter The request adapter to use to execute the requests.
 */
// @ts-ignore
export function createPostsClient(requestAdapter: RequestAdapter) {
    if (requestAdapter === undefined) {
        throw new Error("requestAdapter cannot be undefined");
    }
    let serializationWriterFactory : SerializationWriterFactoryRegistry
    let parseNodeFactoryRegistry : ParseNodeFactoryRegistry
    
    if (requestAdapter.getParseNodeFactory() instanceof ParseNodeFactoryRegistry) {
        parseNodeFactoryRegistry = requestAdapter.getParseNodeFactory() as ParseNodeFactoryRegistry
    } else {
        throw new Error("requestAdapter.getParseNodeFactory() is not a ParseNodeFactoryRegistry")
    }
    
    if (requestAdapter.getSerializationWriterFactory() instanceof SerializationWriterFactoryRegistry) {
        serializationWriterFactory = requestAdapter.getSerializationWriterFactory() as SerializationWriterFactoryRegistry
    } else {
        throw new Error("requestAdapter.getSerializationWriterFactory() is not a SerializationWriterFactoryRegistry")
    }
    
    serializationWriterFactory.registerDefaultSerializer(JsonSerializationWriterFactory);
    serializationWriterFactory.registerDefaultSerializer(TextSerializationWriterFactory);
    serializationWriterFactory.registerDefaultSerializer(FormSerializationWriterFactory);
    serializationWriterFactory.registerDefaultSerializer(MultipartSerializationWriterFactory);
    
    const backingStoreFactory = requestAdapter.getBackingStoreFactory();
    parseNodeFactoryRegistry.registerDefaultDeserializer(JsonParseNodeFactory, backingStoreFactory);
    parseNodeFactoryRegistry.registerDefaultDeserializer(TextParseNodeFactory, backingStoreFactory);
    parseNodeFactoryRegistry.registerDefaultDeserializer(FormParseNodeFactory, backingStoreFactory);
    if (requestAdapter.baseUrl === undefined || requestAdapter.baseUrl === null || requestAdapter.baseUrl === "") {
        requestAdapter.baseUrl = "https://localhost:57679";
    }
    const pathParameters: Record<string, unknown> = {
        "baseurl": requestAdapter.baseUrl,
    };
    return apiClientProxifier<PostsClient>(requestAdapter, pathParameters, PostsClientNavigationMetadata, undefined);
}
/**
 * The main entry point of the SDK, exposes the configuration and the fluent API.
 */
export interface PostsClient extends BaseRequestBuilder<PostsClient> {
    /**
     * The auth property
     */
    get auth(): AuthRequestBuilder;
    /**
     * The BloodDonationRequests property
     */
    get bloodDonationRequests(): BloodDonationRequestsRequestBuilder;
    /**
     * The BTC property
     */
    get bTC(): BTCRequestBuilder;
    /**
     * The communes property
     */
    get communes(): CommunesRequestBuilder;
    /**
     * The Contributors property
     */
    get contributors(): ContributorsRequestBuilder;
    /**
     * The Dashboard property
     */
    get dashboard(): DashboardRequestBuilder;
    /**
     * The donor property
     */
    get donor(): DonorRequestBuilder;
    /**
     * The enums property
     */
    get enums(): EnumsRequestBuilder;
    /**
     * The Pledges property
     */
    get pledges(): PledgesRequestBuilder;
    /**
     * The subscriptions property
     */
    get subscriptions(): SubscriptionsRequestBuilder;
    /**
     * The user property
     */
    get user(): UserRequestBuilder;
    /**
     * The users property
     */
    get users(): UsersRequestBuilder;
    /**
     * The Wilayas property
     */
    get wilayas(): WilayasRequestBuilder;
}
/**
 * Uri template for the request builder.
 */
export const PostsClientUriTemplate = "{+baseurl}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PostsClientNavigationMetadata: Record<Exclude<keyof PostsClient, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    auth: {
        navigationMetadata: AuthRequestBuilderNavigationMetadata,
    },
    bloodDonationRequests: {
        requestsMetadata: BloodDonationRequestsRequestBuilderRequestsMetadata,
    },
    bTC: {
        requestsMetadata: BTCRequestBuilderRequestsMetadata,
        navigationMetadata: BTCRequestBuilderNavigationMetadata,
    },
    communes: {
        navigationMetadata: CommunesRequestBuilderNavigationMetadata,
    },
    contributors: {
        requestsMetadata: ContributorsRequestBuilderRequestsMetadata,
        navigationMetadata: ContributorsRequestBuilderNavigationMetadata,
    },
    dashboard: {
        navigationMetadata: DashboardRequestBuilderNavigationMetadata,
    },
    donor: {
        navigationMetadata: DonorRequestBuilderNavigationMetadata,
    },
    enums: {
        navigationMetadata: EnumsRequestBuilderNavigationMetadata,
    },
    pledges: {
        requestsMetadata: PledgesRequestBuilderRequestsMetadata,
        navigationMetadata: PledgesRequestBuilderNavigationMetadata,
    },
    subscriptions: {
        requestsMetadata: SubscriptionsRequestBuilderRequestsMetadata,
        navigationMetadata: SubscriptionsRequestBuilderNavigationMetadata,
    },
    user: {
        requestsMetadata: UserRequestBuilderRequestsMetadata,
    },
    users: {
        requestsMetadata: UsersRequestBuilderRequestsMetadata,
    },
    wilayas: {
        requestsMetadata: WilayasRequestBuilderRequestsMetadata,
    },
};
/* tslint:enable */
/* eslint-enable */
