/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCreatePledgeResponseFromDiscriminatorValue, createListPledgesResponseFromDiscriminatorValue, createProblemDetailsFromDiscriminatorValue, serializeCreatePledgeRequest, serializeCreatePledgeResponse, type CreatePledgeRequest, type CreatePledgeResponse, type ListPledgesResponse, type ProblemDetails } from '../models/index.js';
// @ts-ignore
import { type WithPledgeItemRequestBuilder, WithPledgeItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /Pledges
 */
export interface PledgesRequestBuilder extends BaseRequestBuilder<PledgesRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.Pledges.item collection
     * @param pledgeId Unique identifier of the item
     * @returns {WithPledgeItemRequestBuilder}
     */
     byPledgeId(pledgeId: string) : WithPledgeItemRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ListPledgesResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<PledgesRequestBuilderGetQueryParameters> | undefined) : Promise<ListPledgesResponse | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CreatePledgeResponse>}
     * @throws {ProblemDetails} error when the service returns a 400 status code
     */
     post(body: CreatePledgeRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CreatePledgeResponse | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PledgesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreatePledgeRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface PledgesRequestBuilderGetQueryParameters {
    filter?: string;
}
/**
 * Uri template for the request builder.
 */
export const PledgesRequestBuilderUriTemplate = "{+baseurl}/Pledges{?filter*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PledgesRequestBuilderNavigationMetadata: Record<Exclude<keyof PledgesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byPledgeId: {
        requestsMetadata: WithPledgeItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["pledgeId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PledgesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: PledgesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createListPledgesResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: PledgesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCreatePledgeResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreatePledgeRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
