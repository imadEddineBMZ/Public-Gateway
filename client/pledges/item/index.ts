/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createProblemDetailsFromDiscriminatorValue, createUpdatePledgeResponseFromDiscriminatorValue, serializeUpdatePledgeRequest, serializeUpdatePledgeResponse, type ProblemDetails, type UpdatePledgeRequest, type UpdatePledgeResponse } from '../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /Pledges/{pledgeId}
 */
export interface WithPledgeItemRequestBuilder extends BaseRequestBuilder<WithPledgeItemRequestBuilder> {
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<UpdatePledgeResponse>}
     * @throws {ProblemDetails} error when the service returns a 400 status code
     */
     put(body: UpdatePledgeRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<UpdatePledgeResponse | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: UpdatePledgeRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithPledgeItemRequestBuilderUriTemplate = "{+baseurl}/Pledges/{pledgeId}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithPledgeItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    put: {
        uriTemplate: WithPledgeItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createUpdatePledgeResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUpdatePledgeRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
