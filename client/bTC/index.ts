/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createListBloodTansfusionCentersResponseFromDiscriminatorValue, type ListBloodTansfusionCentersResponse } from '../models/index.js';
// @ts-ignore
import { SubscribedRequestBuilderRequestsMetadata, type SubscribedRequestBuilder } from './subscribed/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /BTC
 */
export interface BTCRequestBuilder extends BaseRequestBuilder<BTCRequestBuilder> {
  byBtcId(btcId: string): unknown;
    /**
     * The subscribed property
     */
    get subscribed(): SubscribedRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ListBloodTansfusionCentersResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<BTCRequestBuilderGetQueryParameters> | undefined) : Promise<ListBloodTansfusionCentersResponse | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<BTCRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
export interface BTCRequestBuilderGetQueryParameters {
    filter?: string;
    level?: number;
    loggedUserId?: string;
}
/**
 * Uri template for the request builder.
 */
export const BTCRequestBuilderUriTemplate = "{+baseurl}/BTC{?filter*,level*,loggedUserId*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const BTCRequestBuilderNavigationMetadata: Record<Exclude<keyof BTCRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    subscribed: {
        requestsMetadata: SubscribedRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const BTCRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: BTCRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createListBloodTansfusionCentersResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
