/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCreateSubscriptionResponseFromDiscriminatorValue, serializeCreateSubscriptionRequest, serializeCreateSubscriptionResponse, type CreateSubscriptionRequest, type CreateSubscriptionResponse } from '../models/index.js';
// @ts-ignore
import { type WithSubscriptionItemRequestBuilder, WithSubscriptionItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /subscriptions
 */
export interface SubscriptionsRequestBuilder extends BaseRequestBuilder<SubscriptionsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.subscriptions.item collection
     * @param subscriptionId Unique identifier of the item
     * @returns {WithSubscriptionItemRequestBuilder}
     */
     bySubscriptionId(subscriptionId: string) : WithSubscriptionItemRequestBuilder;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CreateSubscriptionResponse>}
     */
     post(body: CreateSubscriptionRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CreateSubscriptionResponse | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateSubscriptionRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const SubscriptionsRequestBuilderUriTemplate = "{+baseurl}/subscriptions";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SubscriptionsRequestBuilderNavigationMetadata: Record<Exclude<keyof SubscriptionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bySubscriptionId: {
        requestsMetadata: WithSubscriptionItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["subscriptionId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SubscriptionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: SubscriptionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createCreateSubscriptionResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateSubscriptionRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
